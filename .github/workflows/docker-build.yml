name: Docker Build and Push

on:
  workflow_dispatch:  # Allow manual workflow dispatch.
  push:
    branches:
      - main    # Trigger the workflow on pushes to main branch.
      - dev     # Trigger the workflow on pushes to dev branch.
    tags:
      - v*      # Trigger the workflow on version tags (e.g., v1.0.0).

env:
  REGISTRY: docker.io
  IMAGE_NAME: 'ixinjulu/platform'

jobs:
  build_components:
    runs-on: ubuntu-latest

    # Matrix strategy to build both backend and frontend for different platforms
    strategy:
      fail-fast: false
      matrix:
        component: [docker-backend, docker-frontend]  # Define both backend and frontend
        platform: [linux/amd64, linux/arm64]          # Build for multiple platforms: amd64 and arm64

    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v4

      # Step 2: Set up QEMU for cross-platform support (multi-arch build)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Log in to Docker Hub (credentials are pulled from GitHub Secrets)
      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Select the correct Dockerfile for the component (backend or frontend)
      - name: Select Dockerfile for build
        id: select-dockerfile
        run: |
          if [[ "${{ matrix.component }}" == "docker-backend" ]]; then
            echo "DOCKERFILE=docker/build_and_push_backend.Dockerfile" >> $GITHUB_ENV
          elif [[ "${{ matrix.component }}" == "docker-frontend" ]]; then
            echo "DOCKERFILE=docker/frontend/build_and_push_frontend.Dockerfile" >> $GITHUB_ENV
          fi
        shell: bash

      # Step 6: Build and push Docker image using the Dockerfile selected
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .  # Use current directory for the build context
          platforms: ${{ matrix.platform }}  # Build for both platforms (amd64 and arm64)
          push: true  # Push the image to Docker Hub
          file: ${{ env.DOCKERFILE }}  # Use Dockerfile chosen by previous step
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.ref == 'refs/heads/main' && 'latest' || github.ref == 'refs/heads/dev' && 'dev' || github.ref_name }}
          build-args: |
            LANGFLOW_IMAGE=ixinjulu/platform:latest

      # Optional: Verify Docker images (sanity check by listing images)
      - name: Verify Docker Images
        run: docker images

  merge_images:
    needs: build_components
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up Docker Buildx for creating multi-platform manifests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 2: Log in to Docker Hub for pushing the manifest
      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Create and push multi-architecture Docker manifests
      - name: Create and Push Multi-Platform Manifests
        run: |
          docker buildx imagetools create \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.IMAGE_NAME }}:dev \
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

      # Step 4: Optional: Verify Docker manifests (sanity check)
      - name: Verify Docker manifests
        run: docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:latest
